name: Terraform Control

on:
  workflow_dispatch:
    inputs:
      TERRAFORM_ACTION:
        description: "Terraform Action"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
    
jobs:
  build:
    runs-on: ubuntu-latest
    environment: Prod
    steps:
    - uses: actions/checkout@v4

    - name: AWS Login
      uses: aws-actions/configure-aws-credentials@v4.2.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Docker Hub Login
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'apply' }}"  
      uses: docker/login-action@v3.4.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Get secrets by name and by ARN
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          ,arn:aws:secretsmanager:eu-west-1:670114001127:secret:eventsDb-RQMi9g
        parse-json-secrets: true

    - name: Configure Terraform
      working-directory: ./aws/terraform
      run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
          terraform init

    - name: Plan Terraform
      working-directory: ./aws/terraform
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'plan' }}"
      run: terraform plan -var dbUser="$DBUSER" -var dbPassword="$DBPASSWORD" -var dbName="$DBNAME"

    - name: Destroy Terraform
      working-directory: ./aws/terraform
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'destroy' }}"
      run: terraform destroy --auto-approve

    # Apply includes Terraform and Nodepool configuration
    - name: Apply Terraform
      working-directory: ./aws/terraform
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'apply' }}"
      run: terraform apply -var dbUser="$DBUSER" -var dbPassword="$DBPASSWORD" -var dbName="$DBNAME" --auto-approve

    - name: Install Helm
      working-directory: ./aws/terraform
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'apply' }}"
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
    
    - name: Configure Primary Cluster
      working-directory: ./aws/terraform
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'apply' }}"
      run: |
        aws eks update-kubeconfig --region eu-west-1 --name aer-cluster
        terraform output -json | jq -r 'to_entries[] | "\(.key): \(.value.value)"' >> /tmp/values.yaml
        helm install nodepool -f /tmp/values.yaml --set failoverRegion=primary oci://registry-1.docker.io/jamesrelph/nodepool:1.1.0
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver
        helm repo add aws-secrets-manager https://aws.github.io/secrets-store-csi-driver-provider-aws
        helm install -n kube-system secrets-provider-aws aws-secrets-manager/secrets-store-csi-driver-provider-aws

    - name: Configure Secondary Cluster
      working-directory: ./aws/terraform
      if: "${{ github.event.inputs.TERRAFORM_ACTION == 'apply' }}"
      run: |
        aws eks update-kubeconfig --region eu-west-2 --name aer-cluster
        terraform output -json | jq -r 'to_entries[] | "\(.key): \(.value.value)"' >> /tmp/values.yaml
        helm install nodepool -f /tmp/values.yaml --set failoverRegion=secondary oci://registry-1.docker.io/jamesrelph/nodepool:1.1.0
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver
        helm repo add aws-secrets-manager https://aws.github.io/secrets-store-csi-driver-provider-aws
        helm install -n kube-system secrets-provider-aws aws-secrets-manager/secrets-store-csi-driver-provider-aws